---
# This playbook generates the DC/OS installation/configuration files

- name: make sure docker-python RPM is not installed
  yum:
    name: docker-python
    state: absent

- name: make sure epel-release is installed
  yum:
    name: epel-release
    state: present

- name: make sure pip is installed
  yum:
    name: python-pip
    state: present

- name: make sure required PyPi packages are installed
  pip: name={{ item }} state=present
  with_items:
    - docker-py==1.2.3
    - six>=1.4.0

- name: start ZooKeeper for shared storage
  docker:
    name: dcos_int_zk
    image: jplock/zookeeper
    state: started
    ports:
    - "2181:2181"
    - "2888:2888"
    - "3888:3888"
  when: exhibitor == "zookeeper"

- name: install NFS utilities
  yum: name=nfs-utils state=latest
  when: exhibitor == "shared_filesystem"

- name: create mount point
  file: path=/shared-mount state=directory mode=0777
  when: exhibitor == "shared_filesystem"

- name: configure mount point
  lineinfile: dest=/etc/exports regexp=^/shared-mount line='/shared-mount    *(rw,sync,no_root_squash,no_all_squash)'
  when: exhibitor == "shared_filesystem"

- name: enable NFS services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  when: exhibitor == "shared_filesystem"
  with_items:
    - rpcbind
    - nfs-server
    - nfs-lock
    - nfs-idmap

- name: create install directory
  file: path={{ path_tmp }} state=directory mode=0755

- name: create install directory/genconf
  file: path={{ path_tmp }}/genconf/ state=directory mode=0755

- name: download installation file
  get_url: url="{{ dcos_download }}" dest={{ path_tmp }}/dcos_generate_config.sh mode=0440

- name: set IP detection script for AWS
  template: src=ip-detect-aws.j2 dest={{ path_tmp }}/genconf/ip-detect mode=0644
  when: ip_detect == "aws"

- name: set IP detection script for GCE
  template: src=ip-detect-gce.j2 dest={{ path_tmp }}/genconf/ip-detect mode=0644
  when: ip_detect == "gce"

- name: set IP detection script for eth0
  template: src=ip-detect-eth0.j2 dest={{ path_tmp }}/genconf/ip-detect mode=0644
  when: ip_detect == "eth0"

- name: set IP detection script for eth1
  template: src=ip-detect-eth1.j2 dest={{ path_tmp }}/genconf/ip-detect mode=0644
  when: ip_detect == "eth1"

- name: generate DC/OS configuration with exhibitor backend static
  template: src=config-static.yaml.j2 dest={{ path_tmp }}/genconf/config.yaml mode=0644
  when: exhibitor == "static"

- name: generate DC/OS configuration with exhibitor backend ZooKeeper
  template: src=config-zookeeper.yaml.j2 dest={{ path_tmp }}/genconf/config.yaml mode=0644
  when: exhibitor == "zookeeper"

- name: generate DC/OS configuration with exhibitor backend AWS S3
  template: src=config-aws_s3.yaml.j2 dest={{ path_tmp }}/genconf/config.yaml mode=0644
  when: exhibitor == "aws_s3"

- name: generate DC/OS configuration with exhibitor backend Shared Filesystem
  template: src=config-shared_filesystem.yaml.j2 dest={{ path_tmp }}/genconf/config.yaml mode=0644
  when: exhibitor == "shared_filesystem"

- name: generate DC/OS bootstrap files
  shell: bash dcos_generate_config.sh chdir={{ path_tmp }}

# To allow bootstrapping from master node, we disable docker restarts so the
# serving nginx server is not shutdown.
- name: disable docker restart (1/2)
  replace: dest={{ path_tmp }}/genconf/serve/dcos_install.sh regexp="systemctl restart systemd-journald" replace=""
- name: disable docker restart (2/2)
  replace: dest={{ path_tmp }}/genconf/serve/dcos_install.sh regexp="systemctl restart docker" replace=""

- name: start web server to serve the bootstrap files
  docker:
    name: dcos_nginx
    image: nginx
    state: started
    ports:
    - "{{ port_webserver }}:80"
    volumes:
    - "{{ path_tmp }}/genconf/serve:/usr/share/nginx/html:ro"
